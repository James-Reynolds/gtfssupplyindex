% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SI_calc.R
\name{si_calc_one_route}
\alias{si_calc_one_route}
\title{Calculate the SI values for an individual mode (route_type)}
\usage{
si_calc_one_route(
  stops_in_or_near_areas_dataframe_and_route_type,
  list_gtfs,
  date_ymd,
  start_hms,
  end_hms,
  verbose = FALSE
)
}
\arguments{
\item{list_gtfs}{the list (by route_type) of tidygtfs objects}

\item{date_ymd}{the date for which the SI should be calculated}

\item{start_hms}{the start time for which the SI should be calculated,
inclusive of services that arrive at that time precisely}

\item{end_hms}{the end time for which the SI should be calculated,
exclusive of services that arrive at that time precisely}

\item{verbose}{if TRUE function will print intermediate tables and steps.}

\item{stops_in_or_near_areas_dataframe}{a datatable of
stop_id, area_id and area_terms, as generated by the stops_in_walk_dist function
and stored as list elements in stops_in_or_near_areas}
}
\value{
a datatable with area_id and matching SI scores
}
\description{
Called by the SI_calc function to generate each datatable of area_id and SI
}
\examples{
#'#load the revised mornington GTFS data
library(dplyr)
list_gtfs = gtfssupplyindex:::gtfs_by_route_type(system.file(
 "extdata/mornington180109",
 "gtfs.zip", 
 package = "gtfssupplyindex", 
 mustWork = TRUE))

areas_of_interest <- load_areas_of_interest(absmapsdata::sa22021 \%>\% 
                                             dplyr::filter(sa3_name_2021 == "Mornington Peninsula") \%>\% 
                                             dplyr::select(sa2_code_2021),  
                                           area_id_field = "sa2_code_2021")

buffer_distance <- gtfssupplyindex:::load_buffer_zones()

stops_in_or_near_areas <- gtfssupplyindex:::stops_in_walk_dist(
 list_gtfs = list_gtfs, 
 areas_of_interest = areas_of_interest,
 EPSG_for_transform = 28355,
 verbose = FALSE
)

si_by_mode_and_time_one_route_type <- si_calc_one_route(
 stops_in_or_near_areas_dataframe = 
 stops_in_or_near_areas_list_with_route_name <- mapply(function(x, nm){ 
   route_type_name = nm
   x <- list(x)
   append(x, 
          route_type_name)
               }, 
   stops_in_or_near_areas, names(stops_in_or_near_areas), SIMPLIFY=FALSE)[[1]],
 list_gtfs = list_gtfs,
 date_ymd = lubridate::ymd("2018-12-30"), 
 start_hms = lubridate::hms("10:30:00"),
 end_hms = lubridate::hms("16:00:00"),
 verbose = TRUE)
}
