% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SI_calc.R
\name{si_calc}
\alias{si_calc}
\title{Calculate the SI for a list (by route_type) of tidygtfs objects}
\usage{
si_calc(
  list_gtfs,
  stops_in_or_near_areas,
  date_ymd,
  start_hms,
  end_hms,
  verbose = FALSE
)
}
\arguments{
\item{list_gtfs}{the list (by route_type) of tidygtfs objects}

\item{stops_in_or_near_areas}{the list (by route_type) of stop_in_or_near_areas,
created by the stop_in_walk_dist function}

\item{date_ymd}{the date for which the SI should be calculated}

\item{start_hms}{the start time for which the SI should be calculated,
inclusive of services that arrive at that time precisely}

\item{end_hms}{the end time for which the SI should be calculated,
exclusive of services that arrive at that time precisely}

\item{verbose}{if TRUE function will print intermediate tables and steps.}
}
\value{
a list (by route_type) of dataframes with area_id and matching SI scores
}
\description{
Calculate the SI for a list (by route_type) of tidygtfs objects
}
\examples{
#load the revised mornington GTFS data
library(dplyr)
list_gtfs = gtfssupplyindex:::gtfs_by_route_type(system.file(
 "extdata/mornington180109",
 "gtfs.zip", 
 package = "gtfssupplyindex", 
 mustWork = TRUE))

areas_of_interest <- load_areas_of_interest(absmapsdata::sa22021 \%>\% 
            filter(sa3_name_2021 ==  "Mornington Peninsula") \%>\% 
                                             select(sa2_code_2021),  
                                           area_id_field = "sa2_code_2021")

buffer_distance <- gtfssupplyindex:::load_buffer_zones()

stops_in_or_near_areas <- gtfssupplyindex:::stops_in_walk_dist(
 list_gtfs = list_gtfs, 
 areas_of_interest = areas_of_interest,
 EPSG_for_transform = 28355,
 verbose = FALSE
)

####----run SI.calc function to build si_by_mode_and_time list (by route_type) of tables

si_by_mode_and_time <- si_calc(
 list_gtfs = list_gtfs,
 stops_in_or_near_areas = stops_in_or_near_areas, 
 date_ymd = lubridate::ymd("2018-12-30"), 
 start_hms = lubridate::hms("10:30:00"),
 end_hms = lubridate::hms("16:00:00"),
 verbose = TRUE)
}
